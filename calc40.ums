.section rodata
    jumptable:         # label pointing to start of jump table
    .space 256         # 256 words for each possible byte value

.section init
    .zero r0
    .temps r6, r7

    r3 := endvalstack
    .section data
    .space 100000
    endvalstack:

.section init
    r4 := 0
    setTable:
        r5 := jumptable + r4
        m[r0][r5] := input_error
        r4 := r4 + 1
        if (r4 <s 256) goto setTable using r5

    # Overwrite digit entries ('0' through '9')
    r4 := '0'
    setDigits:
        r5 := jumptable + r4
        m[r0][r5] := digit
        r4 := r4 + 1
        if (r4 <=s '9') goto setDigits using r5
    

    m[r0][jumptable + ' '] := waiting
    m[r0][jumptable + '*'] := multiply
    m[r0][jumptable + '+'] := add
    m[r0][jumptable + '-'] := subtract
    m[r0][jumptable + '/'] := divide
    m[r0][jumptable + '&'] := and
    m[r0][jumptable + '|'] := or
    m[r0][jumptable + '~'] := not
    m[r0][jumptable + 'c'] := flip
    m[r0][jumptable + 's'] := swap
    m[r0][jumptable + 'd'] := duplicate
    m[r0][jumptable + 'p'] := popTop
    m[r0][jumptable + 'z'] := popAll

    m[r0][jumptable + '\n'] := callPrint
    

.section text
    main:
        push r1 on stack r2
        goto waiting
    
    return:
        pop r5 off stack r2
        pop r1 off stack r2
        goto r1
    
    waiting:
        r5 := input()
        push r5 on stack r2

        r4 := r5 nand r5
        if (r4 == r0) goto return using r5

        pop r5 off stack r2
        
        r4 := jumptable + r5
        goto m[r0][r4]

    entering:
        r5 := input()

        push r1 on stack r2

        if (r5 <s '0') goto jump using r1
        if (r5 >s '9') goto jump using r1

        pop r1 off stack r2

        r5 := r5 - 48
        pop r4 off stack r3
        r4 := r4 * 10
        r4 := r4 + r5
        push r4 on stack r3

        goto entering


    input_error:
        output "Unknown character '"
        output r5
        output "'\n"
        goto waiting

    digit:
        r5 := r5 - 48
        push r5 on stack r3

        goto entering

    jump:
        pop r1 off stack r2
        r5 := jumptable + r5
        goto m[r0][r5]

    callPrint:
        push r5 on stack r2
        push r4 on stack r2
        r5 := endvalstack - r3 # size of the r3 stack
        goto printLoop

    
    printLoop:
        if (r5 == r0) goto cleanPrint using r4
        r5 := r5 - 1 # r5 is the iterator that will tell us when to stop
        r4 := endvalstack - r3 # size of r3 stack
        r4 := r4 - 1  # we want the size minus 1 to get the reach amount
        r4 := r4 - r5 # size - 1 - iterator = amount to reach down into r3 stack
        
        push r5 on stack r2 # keep counter on r2 stack
        push r4 on stack r2 # keep reach number on r2 stack
        goto print

    cleanPrint:
        pop r4 off stack r2
        pop r5 off stack r2
        goto waiting



    # BINARY OPERATIONS ########################################################

    multiply:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 2) goto printUnderflow2 using r4

        pop r4 off stack r3
        pop r5 off stack r3
        r4 := r4 * r5
        push r4 on stack r3

        goto instructionEnd

    add:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 2) goto printUnderflow2 using r4

        pop r4 off stack r3
        pop r5 off stack r3
        r4 := r4 + r5
        push r4 on stack r3

        goto instructionEnd

    subtract:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 2) goto printUnderflow2 using r4

        pop r4 off stack r3
        pop r5 off stack r3
        r4 := r5 - r4
        push r4 on stack r3

        goto instructionEnd

    divide:
        push r4 on stack r2
        push r5 on stack r2

        # push r1 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 2) goto printUnderflow2 using r4

        # pop r1 off stack r2
        pop r4 off stack r3
        pop r5 off stack r3

        push r1 on stack r2

        if (r4 == r0) goto divZero using r1 # case for diving by zero
        # case for when the first number is a negative i
        if (r4 <s r0) goto divFirstNeg using r1 
        # case for when the second number is negative, 
        if (r5 <s r0) goto divNegPos using r1
        
        # Pos pos division
        r4 := r5 / r4
        pop r1 off stack r2
        push r4 on stack r3

        goto instructionEnd

    divZero:
        pop r1 off stack r2
        push r5 on stack r3
        push r4 on stack r3
        output "Division by zero\n"
        goto instructionEnd

    divFirstNeg:
        # if r5 is also less than zero, then this mean both the numbers are 
        # negative
        if (r5 <s r0) goto divNegNeg using r1 
        # else, this means the second number is positive 
        goto divPosNeg using r1

    divNegNeg:
        # case for dividing two numbers when both numbers are negative
        pop r1 off stack r2
        r4 := -r4
        r5 := -r5
        r4 := r5 / r4
        push r4 on stack r3

        goto instructionEnd

    divPosNeg:                              # changed from NegPos to PosNeg because it was switched
        # case for diving when first number is negative and second number 
        # is positive
        # pop r1 off stack r2
        pop r1 off stack r2
        r4 := -r4
        r4 := r5 / r4
        r4 := -r4
        push r4 on stack r3

        goto instructionEnd
    
    divNegPos:
        pop r1 off stack r2
        r5 := -r5
        r4 := r5 / r4
        r4 := -r4
        push r4 on stack r3
        
        goto instructionEnd

    and:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 2) goto printUnderflow2 using r4

        pop r4 off stack r3
        pop r5 off stack r3
        r4 := r5 & r4
        push r4 on stack r3

        goto instructionEnd

    or:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 2) goto printUnderflow2 using r4

        pop r4 off stack r3
        pop r5 off stack r3
        r4 := r5 | r4
        push r4 on stack r3

        goto instructionEnd

    swap:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 2) goto printUnderflow2 using r4

        push r1 on stack r2

        pop r4 off stack r3
        pop r5 off stack r3
        r1 := r4
        r4 := r5
        r5 := r1

        push r5 on stack r3
        push r4 on stack r3

        pop r1 off stack r2
        
        goto instructionEnd


    instructionEnd:
        pop r5 off stack r2
        pop r4 off stack r2

        goto waiting
    
    # UNARY OPERATIONS #########################################################

    not:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 1) goto printUnderflow1 using r4

        pop r4 off stack r3
        r4 := ~r4
        push r4 on stack r3

        goto instructionEnd
    
    flip:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 1) goto printUnderflow1 using r4

        pop r4 off stack r3
        r4 := -r4
        push r4 on stack r3

        goto instructionEnd
    

    duplicate:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 1) goto printUnderflow1 using r4

        pop r4 off stack r3
        push r4 on stack r3
        push r4 on stack r3

        goto instructionEnd


    popTop:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 1) goto printUnderflow1 using r4

        pop r4 off stack r3

        goto instructionEnd
    

    
    
    # OTHER OPERATIONS #########################################################

    popAll:
        r3 := endvalstack
        goto waiting


    printUnderflow2:
        pop r5 off stack r2
        pop r4 off stack r2
        
        output "Stack underflow---expected at least 2 elements\n"
        goto waiting
    
    printUnderflow1:
        pop r5 off stack r2
        pop r4 off stack r2
        output "Stack underflow---expected at least 1 element\n"
        goto waiting
