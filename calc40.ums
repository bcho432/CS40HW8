.section rodata
    jumptable:         # label pointing to start of jump table
    .space 256         # 256 words for each possible byte value

.section init
    .zero r0
    .temps r6, r7

    r3 := endvalstack
    .section data
    .space 100000
    endvalstack:

.section init
    r4 := 0
    setTable:
        r5 := jumptable + r4
        m[r0][r5] := input_error
        r4 := r4 + 1
        if (r4 <s 256) goto setTable using r5

    # Overwrite digit entries ('0' through '9')
    r4 := '0'
    setDigits:
        r5 := jumptable + r4
        m[r0][r5] := digit
        r4 := r4 + 1
        if (r4 <=s '9') goto setDigits using r5
    

    m[r0][jumptable + ' '] := waiting
    m[r0][jumptable + '*'] := multiply
    m[r0][jumptable + '+'] := add
    m[r0][jumptable + '-'] := subtract
    m[r0][jumptable + '&'] := and
    m[r0][jumptable + '|'] := or
    m[r0][jumptable + 'c'] := flip
    m[r0][jumptable + 's'] := swap
    m[r0][jumptable + 'd'] := duplicate
    m[r0][jumptable + 'p'] := getthatshitouttahere
    m[r0][jumptable + 'z'] := getallthatshitouttahere

    m[r0][jumptable + '\n'] := callPrint
    

.section text
    main:
        push r1 on stack r2

        goto waiting

        # r5 := input()
        # r5 := r5 - 48
        # push r5 on stack r3

        # push r1 on stack r2

        # goto print

        goto return
    
    return:
        pop r1 off stack r2
        goto r1
    
    waiting:
        r5 := input()
        r4 := jumptable + r5
        goto m[r0][r4]

    entering:
        r5 := input()

        push r1 on stack r2

        if (r5 <s '0') goto jump using r1
        if (r5 >s '9') goto jump using r1

        pop r1 off stack r2

        r5 := r5 - 48
        pop r4 off stack r3
        r4 := r4 * 10
        r4 := r4 + r5
        push r4 on stack r3

        goto entering


    input_error:
        output "Unknown character '"
        output r5
        output "'\n"
        goto waiting

    digit:
        r5 := r5 - 48
        push r5 on stack r3

        goto entering

    jump:
        pop r1 off stack r2
        r5 := jumptable + r5
        goto m[r0][r5]

    callPrint:
        push r5 on stack r2
        push r4 on stack r2
        r5 := endvalstack - r3
        goto printLoop

    
    printLoop:
        if (r5 == r0) goto cleanPrint using r4
        r5 := r5 - 1
        r4 := endvalstack - r3
        r4 := r4 - 1
        r4 := r4 - r5
        
        push r5 on stack r2 # keep counter
        push r4 on stack r2 # reach number
        goto print

    cleanPrint:
        pop r4 off stack r2
        pop r5 off stack r2
        goto waiting



    # BINARY OPERATIONS ########################################################

    multiply:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 2) goto printUnderflow2 using r4

        pop r4 off stack r3
        pop r5 off stack r3
        r4 := r4 * r5
        push r4 on stack r3

        pop r5 off stack r2
        pop r4 off stack r2

        goto waiting

    add:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 2) goto printUnderflow2 using r4

        pop r4 off stack r3
        pop r5 off stack r3
        r4 := r4 + r5
        push r4 on stack r3

        pop r5 off stack r2
        pop r4 off stack r2

        goto waiting

    subtract:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 2) goto printUnderflow2 using r4

        pop r4 off stack r3
        pop r5 off stack r3
        r4 := r5 - r4
        push r4 on stack r3

        pop r5 off stack r2
        pop r4 off stack r2

        goto waiting

    and:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 2) goto printUnderflow2 using r4

        pop r4 off stack r3
        pop r5 off stack r3
        r4 := r5 & r4
        push r4 on stack r3

        pop r5 off stack r2
        pop r4 off stack r2

        goto waiting

    or:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 2) goto printUnderflow2 using r4

        pop r4 off stack r3
        pop r5 off stack r3
        r4 := r5 | r4
        push r4 on stack r3

        pop r5 off stack r2
        pop r4 off stack r2

        goto waiting

    swap:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 2) goto printUnderflow2 using r4

        push r1 on stack r2

        pop r4 off stack r3
        pop r5 off stack r3
        r1 := r4
        r4 := r5
        r5 := r1

        push r5 on stack r3
        push r4 on stack r3

        pop r1 off stack r2
        pop r5 off stack r2
        pop r4 off stack r2

        goto waiting

    
    # UNARY OPERATIONS #########################################################

    flip:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 1) goto printUnderflow1 using r4

        pop r4 off stack r3
        r4 := -r4
        push r4 on stack r3

        pop r5 off stack r2
        pop r4 off stack r2

        goto waiting
    

    duplicate:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 1) goto printUnderflow1 using r4

        pop r4 off stack r3
        push r4 on stack r3
        push r4 on stack r3

        pop r5 off stack r2
        pop r4 off stack r2

        goto waiting

    getthatshitouttahere:
        push r4 on stack r2
        push r5 on stack r2
        r5 := endvalstack - r3 # num elements on r3 stack
        if (r5 <s 1) goto printUnderflow1 using r4

        pop r4 off stack r3

        pop r5 off stack r2
        pop r4 off stack r2

        goto waiting
    

    
    
    # OTHER OPERATIONS #########################################################

    getallthatshitouttahere:
        r3 := endvalstack
        goto waiting


    printUnderflow2:
        pop r5 off stack r2
        pop r4 off stack r2
        output "Stack underflow---expected at least 2 elements\n"
        goto waiting
    
    printUnderflow1:
        pop r5 off stack r2
        pop r4 off stack r2
        output "Stack underflow---expected at least 1 element\n"
        goto waiting